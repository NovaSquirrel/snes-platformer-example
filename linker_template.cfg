# ca65 linker config for 1024 KiB (8 Mbit) sfc file

# Physical areas of memory
MEMORY {
  # Reserve the first 24 bytes of RAM for local variables
  ZEROPAGE:   start =  $000018, size = $00E8;

  # Make sure to change BSS based on where you put
  # the stack and how big you expect it to get.
  # Unlike on the NES, we include shadow OAM in BSS here
  # because there's not as much of a benefit to having it
  # page-aligned.
  BSS:        start =  $000200, size = $1E00;
  BSS7E:      start =  $7E2000, size = $E000;
  BSS7F:      start =  $7F0000, size =$10000;

  # Insert automatic memory here

  # The sound processor has its own address space
  SPCZEROPAGE: start =    $0004, size = $00EC;
  SPCRAM:      start =    $0200, size = $FDC0;
}

# Logical areas code/data can be put into.
SEGMENTS {
  # Read-only areas for main CPU

  # Needs to go at the start of a bank, so directly put it in a bank
  PlayerGraphics:
              load = ROM1, type = ro, align = $100, optional=yes;

  # Read-only areas for sound CPU
  SPCIMAGE:   load = ROM0, run=SPCRAM, align = $100, define=yes;

  # Areas for variables for main CPU
  ZEROPAGE:   load = ZEROPAGE, type = zp, define=yes;
  BSS:        load = BSS, type = bss, align = $100, optional=yes;
  BSS7E:      load = BSS7E, type = bss, align = $100, optional=yes;
  BSS7F:      load = BSS7F, type = bss, align = $100, optional=yes;

  # Areas for variables for sound CPU
  SPCZEROPAGE:load = SPCZEROPAGE, type=zp, optional=yes;
  SPCBSS:     load = SPCRAM, type = bss, align = $100, optional=yes;

  # Insert automatic segments here

  # Put SNESHEADER last to avoid bank overflow errors
  SNESHEADER: load = ROM0_code, type = ro, start = $80FFC0;
}
